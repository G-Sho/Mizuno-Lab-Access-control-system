# ========================================
# セキュリティ修正済み環境変数テンプレート
# ========================================

# Firebase Configuration (Client-side)
# これらの値は公開されてもセキュリティ上問題ありません
NEXT_PUBLIC_FIREBASE_API_KEY=your_firebase_api_key_here
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project_id.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project_id.firebasestorage.app
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id
NEXT_PUBLIC_FIREBASE_APP_ID=your_app_id

# Slack Configuration (Client-side)
NEXT_PUBLIC_SLACK_CLIENT_ID=your_slack_client_id_here

# ========================================
# Cloud Functions Environment Variables
# ========================================
# 以下の値は functions/.env ファイルまたは
# Firebase Functions の環境変数設定で管理してください
#
# SLACK_CLIENT_SECRET=your_slack_client_secret_here
# SLACK_WEBHOOK_URL=your_slack_webhook_url_here
# SLACK_CHANNEL_ID=your_slack_channel_id_here
# ENCRYPTION_KEY=your_32_byte_encryption_key_here

# ========================================
# セキュリティ注意事項
# ========================================
# 1. 本番環境では Firebase プロジェクト設定から正しい値を取得してください
# 2. ENCRYPTION_KEY は 32バイトのランダムな文字列を生成してください
#    生成例: openssl rand -hex 32
# 3. .env ファイルは絶対に Git にコミットしないでください
# 4. Cloud Functions の環境変数は Firebase Functions の設定で管理することを推奨します
# 5. 本修正により以下のセキュリティ問題が解決されました:
#    - ハードコードされたFirebase認証情報の除去
#    - Firestoreセキュリティルールの適切な実装
#    - Slackトークンの暗号化
#    - OAuth フローでのCSRF保護
#
# ========================================
# 設定手順
# ========================================
# 1. このファイルを .env にコピー
# 2. Firebase プロジェクトを作成してConfig情報を設定
# 3. Slack Developer Consoleでアプリを作成
# 4. OAuth & Permissionsで以下のスコープを追加:
#    users:read, users:read.email, users.profile:read, chat:write
# 5. Redirect URLsに追加: https://your-function-url/slackoauthcallback
# 6. Slack Incoming Webhookを作成してURLを設定
# 7. 暗号化キーを生成（重要！）
# 8. 上記の値を実際の値に置換